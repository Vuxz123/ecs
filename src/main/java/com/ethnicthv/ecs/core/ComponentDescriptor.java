package com.ethnicthv.ecs.core;

import java.util.*;

/**
 * Descriptor containing metadata about a component's memory layout
 * Generated by ComponentManager through reflection
 */
public class ComponentDescriptor {
    private final Class<?> componentClass;
    private final long totalSize;
    private final Map<String, FieldDescriptor> fields;
    private final List<FieldDescriptor> fieldList;
    private final Component.LayoutType layoutType;

    public ComponentDescriptor(Class<?> componentClass, long totalSize,
                              List<FieldDescriptor> fields, Component.LayoutType layoutType) {
        this.componentClass = componentClass;
        this.totalSize = totalSize;
        this.fieldList = Collections.unmodifiableList(new ArrayList<>(fields));
        this.fields = new HashMap<>();
        for (FieldDescriptor field : fields) {
            this.fields.put(field.name(), field);
        }
        this.layoutType = layoutType;
    }

    public Class<?> getComponentClass() {
        return componentClass;
    }

    public long getTotalSize() {
        return totalSize;
    }

    public FieldDescriptor getField(String name) {
        return fields.get(name);
    }

    public List<FieldDescriptor> getFields() {
        return fieldList;
    }

    public Component.LayoutType getLayoutType() {
        return layoutType;
    }

    /**
     * Field descriptor with type and layout information
     */
    public record FieldDescriptor(
        String name,
        FieldType type,
        long offset,
        long size,
        int alignment
    ) {}

    /**
     * Supported field types
     */
    public enum FieldType {
        BYTE(1, 1),
        SHORT(2, 2),
        INT(4, 4),
        LONG(8, 8),
        FLOAT(4, 4),
        DOUBLE(8, 8),
        BOOLEAN(1, 1),
        CHAR(2, 2);

        private final long size;
        private final int naturalAlignment;

        FieldType(long size, int naturalAlignment) {
            this.size = size;
            this.naturalAlignment = naturalAlignment;
        }

        public long getSize() {
            return size;
        }

        public int getNaturalAlignment() {
            return naturalAlignment;
        }

        public static FieldType fromJavaType(Class<?> type) {
            if (type == byte.class || type == Byte.class) return BYTE;
            if (type == short.class || type == Short.class) return SHORT;
            if (type == int.class || type == Integer.class) return INT;
            if (type == long.class || type == Long.class) return LONG;
            if (type == float.class || type == Float.class) return FLOAT;
            if (type == double.class || type == Double.class) return DOUBLE;
            if (type == boolean.class || type == Boolean.class) return BOOLEAN;
            if (type == char.class || type == Character.class) return CHAR;
            throw new IllegalArgumentException("Unsupported field type: " + type);
        }
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("ComponentDescriptor[")
          .append(componentClass.getSimpleName())
          .append(", size=").append(totalSize)
          .append(", layout=").append(layoutType)
          .append(", fields=[\n");
        for (FieldDescriptor field : fieldList) {
            sb.append("  ").append(field.name())
              .append(": ").append(field.type())
              .append(" @").append(field.offset())
              .append(" (size=").append(field.size())
              .append(", align=").append(field.alignment())
              .append(")\n");
        }
        sb.append("]]");
        return sb.toString();
    }
}

